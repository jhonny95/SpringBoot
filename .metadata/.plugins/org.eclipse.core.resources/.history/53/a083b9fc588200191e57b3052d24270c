package com.example.demo;

import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;

import java.util.List;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.springframework.hateoas.Link;
import org.springframework.hateoas.Resource;
import org.springframework.hateoas.Resources;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;

@RestController
public class EmployeeController {

	private final EmployeeRepository repository;
	private final EmployeeResourceAssembler assembler;
	
	EmployeeController(EmployeeRepository repository,EmployeeResourceAssembler assembler){
		this.repository=repository;
		this.assembler=assembler;
	}
	@GetMapping("/employees")
	Resources<Resource<Employee>>all(){
		//return repository.findAll();
		/*
		List<Resource<Employee>>employees = repository.findAll().stream()
				.map(employee -> new Resource<>(employee,
						linkTo(methodOn(EmployeeController.class).one(employee.getId())).withSelfRel(),
						linkTo(methodOn(EmployeeController.class).all()).withRel("empleyees")))
				.collect(Collectors.toList());
		return new Resources<>(employees, 
				linkTo(methodOn(EmployeeController.class).all()).withSelfRel());*/
		
	}
	@PostMapping("/employees")
	Employee newEmployee(@RequestBody Employee newEmployee) {
		return repository.save(newEmployee);
	}	
	@GetMapping("/employees/{id}")
	Resource<Employee> one(@PathVariable Long id) {
		Employee employee = repository.findById(id)
				.orElseThrow(()->new EmployeeNotFoundException(id));
		
		return assembler.toResource(employee);
		/*
		Employee employee =  repository.findById(id)
				.orElseThrow(()-> new EmployeeNotFoundException(id));
		return new Resource<>(employee,
				linkTo(methodOn(EmployeeController.class).one(id)).withSelfRel(),
				linkTo(methodOn(EmployeeController.class).all()).withRel("employees"));
				*/
	}
	@PutMapping("/employees/{id}")
	Employee replaceEmployee(@RequestBody Employee newEmployee, @PathVariable Long id) {
		return repository.findById(id)
				.map(employee -> {
					employee.setName(newEmployee.getName());
					employee.setRole(newEmployee.getRole());
					return repository.save(employee);
				})
				.orElseGet(()->{
					newEmployee.setId(id);
					return repository.save(newEmployee);
				});
	}
	@DeleteMapping("/employees/{id}")
	void deleteEmployee(@PathVariable Long id) {
		repository.deleteById(id);
	}
	
}
