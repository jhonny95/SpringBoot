package com.example.demo.controllers;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.hateoas.Resource;
import org.springframework.hateoas.Resources;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.Order;
import com.example.demo.OrderResourceAssembler;
import com.example.demo.Status;
import com.example.demo.NotFoundException.OrderNotFoundException;
import com.example.demo.repositorys.OrderRepository;

import static org.springframework.hateoas.mvc.ControllerLinkBuilder.linkTo;
import static org.springframework.hateoas.mvc.ControllerLinkBuilder.methodOn;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;

@RestController
public class OrderController {
	
	private final OrderRepository orderRepository;
	private final OrderResourceAssembler assembler;
	
public OrderController(OrderRepository orderRepository, OrderResourceAssembler assembler) {
this.orderRepository=orderRepository;
this.assembler=assembler;
}
@GetMapping("/orders")
public Resources<Resource<Order>>all(){
	List<Resource<Order>> orders = orderRepository.findAll().stream()
			.map(assembler::toResource)
			.collect(Collectors.toList());	
	return new Resources<>(orders, 
			linkTo(methodOn(OrderController.class).all()).withSelfRel());
}
@GetMapping("/order/{id}")
public Resource<Order>one(@PathVariable Long id){
	return assembler.toResource(
			orderRepository.findById(id)
			.orElseThrow(()-> new OrderNotFoundException(id)));			
}
@PostMapping("/orders")
ResponseEntity<Resource<Order>>newOrder(@RequestBody Order order){
	order.setStatus(Status.IN_PROGRESS);
	Order newOrder = orderRepository.save(order);
	
	return ResponseEntity.created(linkTo(methodOn(OrderController.class).one(newOrder.getId())).toUri())
			.body(assembler.toResource(newOrder));
}

}
